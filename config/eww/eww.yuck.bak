(defwidget sidebar [] (box :orientation "v"))

(defwidget time [] (box :class "time" time))
(defwidget date [] (box :class "date" date))

(defwidget weather [] 
  (box :orientation "v" :class "weather"
    (box :orientation "h" :space-evenly false
      (box :orientation "v" :hexpand true :halign "start" :class "weatherIcon"
        (box :class "icon" :hexpand true weatherIcon)
        (box weatherString)
      )
      (box :orientation "v" :hexpand true :halign "start" :class "weatherIcon"
        (box :class "temp" weatherTemp)
        (box :orientation "h" 
          (box weatherTempMin)
          (box "-")
          (box weatherTempMax)
        )
      )
    )
  )
)

(defwidget wireless [] 
  (box :class "wireless" :orientation "h" :space-evenly false
    (box :orientation "h" :halign "center" :hexpand true
      (button :onclick "wifi" :class "icon" wifiIcon)
      (button :onclick "wifi" wifiNetwork)
    )
    (box :orientation "h" :halign "center" :hexpand true 
      (button :onclick "bluetooth" :class "icon" bluetoothIcon)
      (button :onclick "bluetooth" bluetoothDevice)
    )
  )
)

(defwidget stats [] 
  (box :class "" :orientation "v" :spacing 15
    (metric :value batteryPerc :label batteryIcon )
    (metric :value cpu :label ' ' )
    (metric :value ram :label '' )
    (metric :value disk :label '' :class "drive" ) 
  ))

(defwidget metric [label value]
  (box :orientation "h" :class "metric" :space-evenly false 
    (box :class "icon" label)
    (scale :min 0 :max 101 :value value :hexpand true)
  ))

(defwidget mpd []
  (box :orientation "v" :class "mpd" :spacing 18
    (label :class "title" :orientation "h" :text songName :limit-width 30 :wrap true)
    (metric :value songProgressPerc :label songProgress ) 
    (box :orientation "h" :class "buttons"
      (button :class {false ? 'inactive' : 'active'} :onclick "mpc random" {mpdRandom == 'off' ? '=' : ''})
      (button :onclick "mpc prev" '' )
      (button :onclick "mpc toggle" {mpdPlaying == '1' ? '' : '' })
      (button :onclick "mpc next" '' )
    )
  )
)

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (button :onclick "i3-msg workspace number 1" 1)
    (button :onclick "i3-msg workspace number 2" 2)
    (button :onclick "i3-msg workspace number 3" 3)
    (button :onclick "i3-msg workspace number 4" 4)
    (button :onclick "i3-msg workspace number 5" 5)
    (button :onclick "i3-msg workspace number 6" 6)
    (button :onclick "i3-msg workspace number 7" 7)
    (button :onclick "i-msg workspace number 8" 8)
    (button :onclick "i3-msg workspace number 9" 9)))


(defpoll time :interval "10s" "date '+%H:%M'")
(defpoll date :interval "3200s" "date '+ %A %d %B %Y'")

(defpoll cpu :interval "1s" "usedCpu -p")
(defpoll ram :interval "1s" "usedRam -p")
(defpoll disk :interval "600s" "df /home | tail -n 1 | tr -s ' ' | cut -d' ' -f 5 | tr -d '%'")

(defpoll songName :interval "1s" "mpc | head -n 1")
(defpoll songProgress :interval "1s" "mpc | head -n 2 | tail -n 1 | tr -s ' ' | cut -d' ' -f 3")
(defpoll songProgressPerc :interval "1s" "mpc | head -n 2 | tail -n 1 | tr -s ' ' | cut -d' ' -f 4 | tr -d '()%'")
(defpoll mpdRandom :interval "1s" "mpc | tail -n 1 | grep -oE 'random: [a-z]+ ' | cut -d ' ' -f 2")
(defpoll mpdPlaying :interval "1s" "mpc | grep -o 'playing' | wc -l")

(defpoll bluetoothDevice :interval "5s" "bluetooth --device")
(defpoll bluetoothIcon :interval "5s" "bluetooth --icon")
(defpoll wifiNetwork :interval "5s" "wifi --network")
(defpoll wifiIcon :interval "5s" "wifi --icon")

(defpoll weatherTemp :interval "30s" "weather > /dev/null && cat $XDG_CACHE_HOME/weather/temp")
(defpoll weatherTempMin :interval "30s" "weather > /dev/null && cat $XDG_CACHE_HOME/weather/temp_min")
(defpoll weatherTempMax :interval "30s" "weather > /dev/null && cat $XDG_CACHE_HOME/weather/temp_max")
(defpoll weatherIcon :interval "30s" "cat $XDG_CACHE_HOME/weather/icon")
(defpoll weatherString :interval "30s" "cat $XDG_CACHE_HOME/weather/desc")

(defpoll batteryIcon :interval "5s" "battery -i")
(defpoll batteryPerc :interval "30s" "battery -p")


(defwindow time
  :monitor 2
  :geometry (geometry :x "0%" :y "8%" :width "30%" :height "0%")
  (time)
)

(defwindow date
  :monitor 2
  :geometry (geometry :x "0%" :y "20%" :width "30%" :height "0%")
  (date)
)

(defwindow weather
  :monitor 2
  :geometry (geometry :x "0%" :y "32%" :width "30%" :height "0%")
  (weather)
)

(defwindow wireless
  :monitor 2
  :geometry (geometry :x "0%" :y "2%" :width "30%" :height "0%" :anchor "center left")
  (wireless)
)

(defwindow stats
  :monitor 2
  :geometry (geometry :x "0%" :y "14%" :width "30%" :height "0%" :anchor "center left")
  (stats)
)

(defwindow mpd
  :monitor 2
  :geometry (geometry :x "0%" :y "-5%" :width "30%" :height "0%" :anchor "bottom left")
  (mpd)
)

(defwindow sidebar
  :monitor 2
  :geometry (geometry :x "0px" :y "0px" :width "30%" :height "100%")
  (sidebar)
)
