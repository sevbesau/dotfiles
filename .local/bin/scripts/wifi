#!/usr/bin/env sh

# command wrappers
WPA_CLI="wpa_cli -i wlp3s0"
NOTIFY="notify-send Wifi"
ROFI="rofi -dmenu -theme $XDG_CONFIG_HOME/rofi/list.rasi -p"
ROFI_ERROR="rofi -theme $XDG_CONFIG_HOME/rofi/list.rasi -e"

# constants
SCAN_INTERVAL=60
BLOCK_SCAN="$XDG_CACHE_HOME/wifi_block_scan"

# vars
state=""
curr_ssid=""
curr_bssid=""
function update_state {
	state=$( $WPA_CLI status )
	curr_ssid=$( echo -e "$state" | grep ^ssid | cut -d= -f2 )
	curr_bssid=$( echo -e "$state" | grep bssid | cut -d= -f2 )
}

# run a wpa command
function wpa_command {
	echo -n "wpa_cli $1 $2 $3 $4 > " | tr -s " "
	$WPA_CLI $1 $2 $3 $4
}

# continually scan for networks
function scan {
	while true; do
		[ -f "$BLOCK_SCAN" ] || wpa_command scan
		sleep "$( [ -n "$1" ] && echo "$1" || echo "$SCAN_INTERVAL" )"
	done
}

# get the scan results
function scan_results {
	# get the results
	results=$( $WPA_CLI scan_results | tail -n +2 )
	# no cached results -> rescan
	[ -z "$results" ] && wpa_command scan && sleep 3 && results=$( $WPA_CLI scan_results | tail -n +2 )
	echo -e "$results"
}

# regex for the known network in awk
function known_network_regex {
	known_networks=$( $WPA_CLI list_networks | tail -n +2 )
	regex="$(echo -e "$known_networks" | cut -d $'\t' -f 2 | tr -t $'\n' '|' | sed 's/|/$|^/g' | sed 's/|\^$//' | sed 's/^\^|/^/' )"
	echo -e "^$regex" | tr -d $'\n'
}

# RSSI limits best -30 -> -90 worst
# SIGNAL BARS _â–‚â–„â–†â–ˆ
# sorts, parses and return the scan results
function network_list {
	results="$( scan_results )"
	known_regex="$( known_network_regex )"
	echo -e "$results" | awk -F $'\t' '{ printf "%s\t%s\t%s\t%s\t%s\n", $3,$2,$1,$4,$5 }' | sort -nr | awk \
		-v known_regex="$known_regex" \
		-v curr_ssid="$curr_ssid" \
		-v curr_bssid="$curr_bssid" \
		-v internet="$( ping -c 1 -q 1.1.1.1 >&/dev/null; echo $? )" \
		-F $'\t' \
	'BEGIN { OFS = FS }
	{
		// parse the rssi
		bars = "____"
		strength = ($1 * -1) - 30
		if (strength < 60) { bars = "â–‚___" }
		if (strength < 45) { bars = "â–‚â–„__" }
		if (strength < 30) { bars = "â–‚â–„â–†_" }
		if (strength < 15) { bars = "â–‚â–„â–†â–ˆ" }

		// parse the channel
		channel = ($2 / 1000)

		// parse bssid
		bssid = $3
		if (length(curr_bssid) > 0 && bssid ~ curr_bssid) {
			if (internet == 0) { connected="ïƒ‚" }
			else { connected="ï€Œ" }
		}
		else { connected=" " }

		// parse ssid
		ssid = $5
		// hidden network
		if (ssid == "") { ssid = "ðŸ‘»" }

		// parse the security
		if ($4 ~ /WPA/) { 
			if (length(ssid) > 0 && ssid ~ known_regex) { security = "ï‚„" }
			else { security = "ï€£" }
		} else {
			 security = " " 
		}

		// "print" the parsed fields
		printf "%s, %s, %s, %.1f, %s, %s\n", connected, security, bars, channel, bssid, ssid
	}'
}

# connect and wait for connection by awk index
function connect {
	wpa_command select_network "$1"
	# wait for connection
	update_state
	echo -e "$state\n\n"
	sleep 1
	waited=1
	while [[ $waited -lt 10 && "$state" != *"wpa_state=COMPLETED"* ]]; do 
		update_state
		echo -e "$state\n\n"
		sleep 1
		waited=$(( $waited + 1 ))
	done
	# notify
	[[ "$state" = *"wpa_state=COMPLETED"* ]] && $NOTIFY "Connected to '$2'" || $NOTIFY "Could not connect to '$2'"
}
# disconnect from the current network
function disconnect {
	wpa_command disconnect && $NOTIFY "Disconnected from $1"
}
# forget networks by awk indecis
function forget {
	for wpa_idx in $1; do
		wpa_command remove_network "$wpa_idx"
	done
	$NOTIFY "Removed $2"
}
# set passwords by awk indecis
function set_password {
	password=$( $ROFI "password" -password )
	for wpa_idx in $1; do
		[[ ${#password} -gt 7 && "$password" =~ [a-za-z] && "$password" =~ [0-9] ]] && wpa_command set_network "$wpa_idx" psk "\"$password\"" 
	done
	[[ ${#password} -gt 7 && "$password" =~ [a-za-z] && "$password" =~ [0-9] ]] && $NOTIFY "Updated password for $2"
}
# add a network for each bssid behind an ssid
function add_network {
	# secured network -> get password
	if [[ "$sel_network" = *"ï€£"* ]]; then
		password=$( $ROFI "password" -password )
		while [[ ! ( ${#password} -gt 7 && "$password" =~ [a-zA-Z] && "$password" =~ [0-9] ) ]]; do
			[ -z "$password" ] && exit
			$ROFI_ERROR "invalid password"
			password=$( $ROFI "password" -password )
		done
	fi

  # create a network for each bssid
	for bssid in $2; do
		wpa_idx=$( $WPA_CLI add_network )
		if [ -n "$password" ]; then
			wpa_command set_network "$wpa_idx" psk "\"$password\""
		else
			wpa_command set_network "$wpa_idx" key_mgmt "NONE"
		fi
		wpa_command set_network "$wpa_idx" ssid "\"$1\""
		wpa_command set_network "$wpa_idx" bssid "$bssid"
	done
	connect "$wpa_idx" "$1"
}

# open a menu for a single network
function network_menu {
	known_networks=$( $WPA_CLI list_networks )
	networks="$2"

	sel_network=$( echo -e "$networks" | sed $1"q;d" | sed "s/, /,/g" )
	sel_bssid=$( echo -e "$sel_network" | cut -d, -f5 )
	sel_ssid=$( echo -e "$sel_network" | cut -d, -f6 ) 
	echo "$sel_ssid"

	# get wpa idx by bssid first
	wpa_idx=$( echo -e "$known_networks" | grep "$sel_bssid" | cut -d $'\t' -f 1 )
	[ -z "$wpa_idx" ] && wpa_idx=$( echo "$known_networks" | grep "$sel_ssid" | cut -d $'\t' -f 1 )

	# all the wpa indecis for this ssid
	wpa_idcs=$( echo -e "$known_networks" | grep "$sel_ssid" | cut -d $'\t' -f 1 )

	if [ "$sel_bssid" = "$curr_bssid" ]; then
		# current network
		[[ ! "$known_networks" = *"$sel_bssid"* ]] && wpa_command set_network "$wpa_idx" bssid "$sel_bssid"
		selection=$( echo -e "Disconnect\nChange password\nForget" | $ROFI "$curr_ssid" )
		case "$selection" in
			"Disconnect") disconnect "$sel_ssid"; menu ;;
			"Forget") forget "$wpa_idcs" "$sel_ssid" && menu ;;
			*"password") set_password "$wpa_idcs" "$sel_ssid"; network_menu "$1" ;;
		esac

	elif [[ "$known_networks" = *$'\t'"$sel_ssid"$'\t'* ]]; then
		# known network
		[[ ! "$known_networks" = *"$sel_bssid"* ]] && wpa_command set_network "$wpa_idx" bssid "$sel_bssid"
		selection=$( echo -e "Connect\nChange password\nForget" | $ROFI "$sel_ssid" )
		case "$selection" in
			"Connect") connect "$wpa_idx" "$sel_ssid" ;;
			"Forget") forget "$wpa_idcs" "$sel_ssid" && menu ;;
			*"password") set_password "$wpa_idcs" "$sel_ssid" ; network_menu "$1" ;;
		esac

	else
		# new network
		# get all the bssids behind this ssid
		sel_bssids=$( echo -e "$networks" | grep ", $sel_ssid$" | cut -d, -f5 | tr -d ' ' | tr -t $'\n' ' '  )
		# add the network
		if [[ "$( echo -e "yes\nno" | $ROFI "add $sel_ssid?" )" = "yes" ]]; then
			add_network "$sel_ssid" "$sel_bssids"
		else
			menu
		fi
	fi

	wpa_command save_config
}

# main menu (scan results)
function menu {
	# update the state
	update_state
	networks=$( network_list )

  # block network scanning
	touch "$BLOCK_SCAN"

	# get idx of current to preselect
	[ -n "$curr_bssid" ] && curr_idx=$(( $( echo -e "$networks" | grep -n "$curr_bssid" | cut -d: -f1 ) -1 ))
	# select a network
	selection=$( echo -e "$networks" | cut -d "," -f 1,2,3,4,6 | tr -d ',' | $ROFI "select network" -selected-row "$curr_idx" -format "i" ) 
	[ -z "$selection" ] && return
	selection=$(( $selection + 1 ))
	# open the network menu
	network_menu "$selection" "$networks"
}

# update the state
update_state

case "$1" in
  "--icon") [[ "$state" =~ "wpa_state=COMPLETED" ]] && echo î‡˜ || echo î‡˜ ;;
  "--network") [[ "$state" =~ "wpa_state=COMPLETED" ]] && echo $( echo "$state" | grep "^ssid" | cut -d= -f 2) || echo "" ;;
	"--scan") scan "$2" ;;
	*) menu; rm "$BLOCK_SCAN" ;;
esac
