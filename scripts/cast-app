#!/usr/bin/env sh

# constants
APP_NAME=$( pwd | sed 's/\/app$//g' | rev | cut -d '/' -f 1 | rev )

function confirm {
	echo "continue? [y/n]"
	read answer
	[ -z "$answer" ] || [ "$answer" = "y" ]
}

# print usage
function show_usage() {
  printf "Usage: $0 [options [parameters]]\n\n"
	printf "Options:\n"
	printf " -h --help, print this message and exit\n"
	printf " -k --keys, location of the rsa pub keys\n"
	printf " -s --servers, text file containing the servers\n"
	return 0
}

function send_build {
	# make sure we are in the app dir of the project
	if [[ "$( pwd )" != *"/app" ]]; then
		[ -d ./app ] || echo "no app found" || exit 1
		cd app
	fi

	# make the build
	echo "building..."
	npm run build > /dev/null
	cd dist
	rm build.zip 2> /dev/null
	zip -r build.zip ./* > /dev/null
	echo "created a new build"

	# copy the build to the server
	scp build.zip "$1":/var/www/"$APP_NAME".zip
	echo "sent new build to the hosting server"
}

function unpack_build {
  ssh -i ~/.ssh/id_rsa "root@$1" "env APP_NAME=$APP_NAME /usr/bin/env sh" << 'EOF'
  echo "logged in on the hosting server"
	cd /var/www

	# make a backup of the current running instance
	rm -r "$APP_NAME".bak 2> /dev/null
	mv "$APP_NAME" "$APP_NAME".bak > /dev/null
	echo "backed up the old instance to: /var/www/$APP_NAME.bak"

	# install the new version
	unzip "$APP_NAME".zip -d "$APP_NAME" > /dev/null
	rm "$APP_NAME".zip
	echo "installed the new version at /var/www/$APP_NAME"
EOF
}

[ -z "$1" ] && echo "no server provided!" && exit 1
SERVER_NAME="$1"

echo "Found $APP_NAME-app, start to cast to $SERVER_NAME?"
confirm && send_build $SERVER_NAME && unpack_build $SERVER_NAME

exit 0
