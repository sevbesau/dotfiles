#!/usr/bin/env sh

sinks=$(pulsemixer --list-sinks | cut -d ':' -f 3 | tr -d ' ' | cut -d ',' -f 1)
sources=$(pulsemixer --list-sources | cut -d ':' -f 3 | tr -d ' ' | cut -d ',' -f 1)

function muteAudio {
  while read -r id; do
    pulsemixer --id "$id" --toggle-mute
  done <<< "$sinks"
  notify
}

function muteMic {
  while read -r id; do
    pulsemixer --id "$id" --toggle-mute
  done <<< "$sinks"
  pulsemixer --id source-1 --toggle-mute
  notify
}

function change-volume {
  pulsemixer --change-volume $1 
  notify
}

function notify {
  muted=$(pulsemixer --get-mute)
  volume=$(pulsemixer --get-volume | cut -d" " -f 1)
  fill=$(( $volume / 5 )) 
  empty=$(( 30 - $fill ))
  FILL=$( awk 'BEGIN {while (c++<'$fill') printf "─"}' )
	EMPTY=$( awk 'BEGIN {while (c++<'$empty') printf "─"}' )
  
  volume_str="$FILL┼$EMPTY"

  if [[ $muted -eq 1 ]]; then 
    icon=audio-volume-muted-symbolic.symbolic
  elif [[ $volume -gt 100 ]]; then
    icon=audio-volume-overamplified-symbolic.symbolic
  elif [[ $volume -gt 66 ]]; then
    icon=audio-volume-high-symbolic.symbolic
  elif [[ $volume -gt 33 ]]; then
    icon=audio-volume-medium-symbolic.symbolic
  elif [[ $volume -gt -1 ]]; then
    icon=audio-volume-low-symbolic.symbolic
  fi

  notify-send -i $icon -r 1 -u low "$volume_str"
}

case $1 in 
  "--muteAudio") muteAudio ;;
  "--muteMic") muteMic ;;
  "--playPause") mpc toggle ;;
  *) change-volume $1 ;;
esac  
